@page "/"
@inject IJSRuntime JSRuntime

<div class="container">
    <h1>Steam Wishlist JSON to Markdown Converter</h1>

    <div class="file-drop-zone"
         ondragover="event.preventDefault();"
         ondragenter="event.target.classList.add('highlight')"
         ondragleave="event.target.classList.remove('highlight')"
         ondrop="event.preventDefault(); event.target.classList.remove('highlight'); document.getElementById('fileInput').files = event.dataTransfer.files; document.getElementById('fileInput').dispatchEvent(new Event('change'));">
        <p>Drag and drop a JSON file here, or click to select a file</p>
        <InputFile OnChange="@HandleFileChange" accept="application/json" id="fileInput" />
    </div>

    @if (errorMessage != null)
    {
        <p class="error-message">Error: @errorMessage</p>
    }

    @if (isLoading)
    {
        <div class="loading-spinner"></div>
    }
    else if (jsonData != null && markdownOutput == null)
    {
        <button class="button" @onclick="ConvertData">Convert to Markdown</button>
    }

    @if (markdownOutput != null)
    {
        <div class="checkbox-container">
            <input type="checkbox" id="convertToPdf" @bind="convertToPdf" />
            <label for="convertToPdf">Convert to PDF</label>
        </div>
        <button class="button" @onclick="SaveFile">Save @(convertToPdf ? "PDF" : "Markdown")</button>
    }
</div>

@code {

    private string? errorMessage;
    private string markdownOutput;
    private string filename;
    private long maxFileSize = 1024 * 150; // 150 KB
    private string jsonData;
    private bool isLoading;
    private bool convertToPdf = false;

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        isLoading = true;
        errorMessage = null;
        var file = e.File;
        if (file != null && file.ContentType == "application/json")
        {
            try
            {
                var buffer = new byte[file.Size];
                await file.OpenReadStream(maxFileSize).ReadAsync(buffer);
                jsonData = Encoding.UTF8.GetString(buffer);
            }
            catch (Exception ex)
            {
                errorMessage = ex.Message;
            }
        } else
        {
            errorMessage = "Please select a valid JSON file.";
        }

        isLoading = false;
    }

    private void ConvertData()
    {
        isLoading = true;
        try
        {
            var steamData = JsonConvert.DeserializeObject<SteamData>(jsonData);
            var userCulture = CultureInfo.CurrentCulture;
            markdownOutput = ConvertToMarkdown(steamData, userCulture);
        }
        catch (Exception ex)
        {
            errorMessage = ex.Message;
        }
        isLoading = false;
    }

    static string ConvertToMarkdown(SteamData steamData, CultureInfo culture)
    {
        StringBuilder markdown = new StringBuilder();
        markdown.AppendLine("# Steam Wishlist");
        markdown.AppendLine();

        // Add general information section
        markdown.AppendLine("## General Info");
        markdown.AppendLine();
        markdown.AppendLine($"- Number of games: {GetNumberOfGames(steamData)}");
        markdown.AppendLine($"- Average price: {FormatPrice(GetAveragePrice(steamData), culture)}");
        markdown.AppendLine($"- Total price: {FormatPrice(GetTotalPrice(steamData), culture)}");
        markdown.AppendLine();

        // Add game list section
        markdown.AppendLine("## Game List");
        markdown.AppendLine();
        foreach (var entry in steamData.Data)
        {
            if (entry.Type != "Game" || string.IsNullOrEmpty(entry.Price) || entry.Price == "N/A")
                continue;

            double price = Convert.ToDouble(entry.Price) / 100;
            markdown.AppendLine($"### {entry.Title}");
            markdown.AppendLine();
            markdown.AppendLine($"- Price: {FormatPrice(price, culture)}");
            markdown.AppendLine($"- GameID: {GetGameID(entry.GameId)}");
            markdown.AppendLine($"- URL: {entry.Url}");
            markdown.AppendLine();
        }

        return markdown.ToString();
    }

    static int GetNumberOfGames(SteamData steamData)
    {
        int count = 0;
        foreach (var entry in steamData.Data)
        {
            if (entry.Type == "Game" && !string.IsNullOrEmpty(entry.Price) && entry.Price != "N/A")
                count++;
        }
        return count;
    }

    static double GetAveragePrice(SteamData steamData)
    {
        double total = 0;
        int count = 0;
        foreach (var entry in steamData.Data)
        {
            if (entry.Type == "Game" && !string.IsNullOrEmpty(entry.Price) && entry.Price != "N/A")
            {
                total += Convert.ToDouble(entry.Price);
                count++;
            }
        }
        return count > 0 ? total / count / 100 : 0;
    }

    static double GetTotalPrice(SteamData steamData)
    {
        double total = 0;
        foreach (var entry in steamData.Data)
        {
            if (entry.Type == "Game" && !string.IsNullOrEmpty(entry.Price) && entry.Price != "N/A")
            {
                total += Convert.ToDouble(entry.Price);
            }
        }
        return total / 100;
    }

    static string GetGameID(List<string> gameID)
    {
        if (gameID == null || gameID.Count < 2)
            return "N/A";

        return gameID[1].Replace("app/", "");
    }

    static string FormatPrice(double price, CultureInfo culture)
    {
        if (string.IsNullOrEmpty(price.ToString()))
            return "N/A";

        return price.ToString("C", culture);
    }

    private async Task SaveFile()
    {
        string defaultExt = convertToPdf ? "pdf" : "md";
        string filter = convertToPdf ? "PDF files (*.pdf)|*.pdf" : "Markdown files (*.md)|*.md";

        if (convertToPdf)
        {
            MessageBox.Show("Feature currently not implemented.");
            return;
        }

        // Call the C# method to show the SaveFileDialog
        var fileName = await JSRuntime.InvokeAsync<string>("DotNet.invokeMethodAsync", "SteamWishlistJSONToMarkdownBlazor", "ShowSaveFileDialogStatic", defaultExt, filter);

        if (!string.IsNullOrEmpty(fileName))
        {
            byte[] content;
            if (convertToPdf)
            {
                content = await ConvertToPdf(markdownOutput);
            }
            else
            {
                content = Encoding.UTF8.GetBytes(markdownOutput);
            }

            await File.WriteAllBytesAsync(fileName, content);
        }
    }

    private async Task<byte[]> ConvertToPdf(string markdown)
    {
        // This is a placeholder. You'll need to implement the actual PDF conversion.
        // Might want to use a library like iText7 or PDFsharp for this.
        // For now, we'll just retrun nothing.
        byte[] tempReturnByte = new byte[0];
        return tempReturnByte;
    }

    class SteamData
    {
        public string Version { get; set; }
        public List<SteamEntry> Data { get; set; }
    }

    class SteamEntry
    {
        public List<string> GameId { get; set; }
        public string Title { get; set; }
        public string Url { get; set; }
        public string Type { get; set; }
        public string? ReleaseDate { get; set; }
        public string? Note { get; set; }
        public string? Price { get; set; }
        public int? Discount { get; set; }
    }
}